# k8s-agent-deployment.yaml

# Create a ServiceAccount for the agent pod to use.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-agent-sa

---
# Define the Role with the allowed read-only actions for pods.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]

---
# Bind the ServiceAccount to the Role.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-agent-pod-reader-binding
subjects:
- kind: ServiceAccount
  name: k8s-agent-sa
roleRef:
  kind: Role
  name: pod-reader-role
  apiGroup: rbac.authorization.k8s.io

---
# The Deployment to ensure your agent's pod is always available.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-agent-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: k8s-agent
  template:
    metadata:
      labels:
        app: k8s-agent
    spec:
      serviceAccountName: k8s-agent-sa
      containers:
      - name: k8s-agent
        # IMPORTANT: Replace this with the actual image you pushed to your container registry.
        image: "ghcr.io/your-github-username/your-repo-name:main"
        # These are crucial for an interactive session.
        stdin: true
        tty: true
        env:
        - name: AWS_REGION
          value: "us-east-1" # Or your preferred AWS Bedrock region
        # Assumes a secret named 'aws-credentials' has been created separately.
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: AWS_SECRET_ACCESS_KEY