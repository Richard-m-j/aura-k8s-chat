# A human-readable name for the workflow
name: Build, Push, and Update Manifest

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Environment variables available to all jobs in the workflow
env:
  REGISTRY: ghcr.io
  # The image name will be the same as your repository name, converted to lowercase
  # For example, if your repo is Your-User/K8s-Agent, the image will be ghcr.io/your-user/k8s-agent
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-push-update:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Permissions are essential for the job to interact with your repository and GHCR
    permissions:
      contents: write      # To checkout AND push code
      packages: write      # To push the container image
      attestations: write  # To create attestations
      id-token: write      # For OIDC authentication

    # A sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Logs in to the GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          # The GITHUB_TOKEN is a special, automatically-generated secret for authentication
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Extracts metadata (tags and labels) for the Docker image
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,format=short

      # Step 4: Builds the Docker image and pushes it to the registry
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Uses the tags generated by the metadata step (e.g., ghcr.io/user/repo:b3573a0)
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Step 5: Update deployment manifest
      - name: Update deployment manifest
        run: |
          NEW_IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Updating manifest with image: $NEW_IMAGE_TAG"
          sed -i "s|image: .*|image: $NEW_IMAGE_TAG|g" k8s/04-deployment.yml

      # Step 6: Commit and push manifest changes
      - name: Commit and push manifest changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/04-deployment.yml
          # Commit only if there are changes
          git diff --staged --quiet || git commit -m "CI: Update image tag to ${{ steps.meta.outputs.version }}"
          git push